// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dump.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace motionClustering {

namespace {

const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dump_2eproto() {
  protobuf_AddDesc_dump_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dump.proto");
  GOOGLE_CHECK(file != NULL);
  Trajectory_descriptor_ = file->message_type(0);
  static const int Trajectory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, normalizedpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, hog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, hof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, mbhx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, mbhy_),
  };
  Trajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _is_default_instance_));
  TrajectoryList_descriptor_ = file->message_type(1);
  static const int TrajectoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryList, tracks_),
  };
  TrajectoryList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryList_descriptor_,
      TrajectoryList::default_instance_,
      TrajectoryList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryList, _is_default_instance_));
  VideoInstance_descriptor_ = file->message_type(2);
  static const int VideoInstance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, actionlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, videoindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, numclusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, tracks_),
  };
  VideoInstance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoInstance_descriptor_,
      VideoInstance::default_instance_,
      VideoInstance_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoInstance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInstance, _is_default_instance_));
  VideoList_descriptor_ = file->message_type(3);
  static const int VideoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoList, videos_),
  };
  VideoList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoList_descriptor_,
      VideoList::default_instance_,
      VideoList_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dump_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryList_descriptor_, &TrajectoryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoInstance_descriptor_, &VideoInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoList_descriptor_, &VideoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dump_2eproto() {
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete TrajectoryList::default_instance_;
  delete TrajectoryList_reflection_;
  delete VideoInstance::default_instance_;
  delete VideoInstance_reflection_;
  delete VideoList::default_instance_;
  delete VideoList_reflection_;
}

void protobuf_AddDesc_dump_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndump.proto\022\020motionClustering\"m\n\nTrajec"
    "tory\022\017\n\007trackId\030\001 \001(\005\022\030\n\020normalizedPoint"
    "s\030\002 \003(\002\022\013\n\003hog\030\003 \003(\002\022\013\n\003hof\030\004 \003(\002\022\014\n\004mbh"
    "X\030\005 \003(\002\022\014\n\004mbhY\030\006 \003(\002\">\n\016TrajectoryList\022"
    ",\n\006tracks\030\001 \003(\0132\034.motionClustering.Traje"
    "ctory\"{\n\rVideoInstance\022\023\n\013actionLabel\030\001 "
    "\001(\t\022\022\n\nvideoIndex\030\002 \001(\005\022\023\n\013numClusters\030\003"
    " \001(\005\022,\n\006tracks\030\004 \003(\0132\034.motionClustering."
    "Trajectory\"<\n\tVideoList\022/\n\006videos\030\001 \003(\0132"
    "\037.motionClustering.VideoInstanceb\006proto3", 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dump.proto", &protobuf_RegisterTypes);
  Trajectory::default_instance_ = new Trajectory();
  TrajectoryList::default_instance_ = new TrajectoryList();
  VideoInstance::default_instance_ = new VideoInstance();
  VideoList::default_instance_ = new VideoList();
  Trajectory::default_instance_->InitAsDefaultInstance();
  TrajectoryList::default_instance_->InitAsDefaultInstance();
  VideoInstance::default_instance_->InitAsDefaultInstance();
  VideoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dump_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dump_2eproto {
  StaticDescriptorInitializer_dump_2eproto() {
    protobuf_AddDesc_dump_2eproto();
  }
} static_descriptor_initializer_dump_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTrackIdFieldNumber;
const int Trajectory::kNormalizedPointsFieldNumber;
const int Trajectory::kHogFieldNumber;
const int Trajectory::kHofFieldNumber;
const int Trajectory::kMbhXFieldNumber;
const int Trajectory::kMbhYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motionClustering.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motionClustering.Trajectory)
}

void Trajectory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trackid_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:motionClustering.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dump_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
  trackid_ = 0;
  normalizedpoints_.Clear();
  hog_.Clear();
  hof_.Clear();
  mbhx_.Clear();
  mbhy_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motionClustering.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trackId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normalizedPoints;
        break;
      }

      // repeated float normalizedPoints = 2;
      case 2: {
        if (tag == 18) {
         parse_normalizedPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normalizedpoints())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_normalizedpoints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hog;
        break;
      }

      // repeated float hog = 3;
      case 3: {
        if (tag == 26) {
         parse_hog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hog())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_hog())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hof;
        break;
      }

      // repeated float hof = 4;
      case 4: {
        if (tag == 34) {
         parse_hof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hof())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_hof())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mbhX;
        break;
      }

      // repeated float mbhX = 5;
      case 5: {
        if (tag == 42) {
         parse_mbhX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mbhx())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_mbhx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mbhY;
        break;
      }

      // repeated float mbhY = 6;
      case 6: {
        if (tag == 50) {
         parse_mbhY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mbhy())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_mbhy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motionClustering.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motionClustering.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motionClustering.Trajectory)
  // optional int32 trackId = 1;
  if (this->trackid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trackid(), output);
  }

  // repeated float normalizedPoints = 2;
  if (this->normalizedpoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_normalizedpoints_cached_byte_size_);
  }
  for (int i = 0; i < this->normalizedpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->normalizedpoints(i), output);
  }

  // repeated float hog = 3;
  if (this->hog_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hog_cached_byte_size_);
  }
  for (int i = 0; i < this->hog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->hog(i), output);
  }

  // repeated float hof = 4;
  if (this->hof_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hof_cached_byte_size_);
  }
  for (int i = 0; i < this->hof_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->hof(i), output);
  }

  // repeated float mbhX = 5;
  if (this->mbhx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mbhx_cached_byte_size_);
  }
  for (int i = 0; i < this->mbhx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->mbhx(i), output);
  }

  // repeated float mbhY = 6;
  if (this->mbhy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mbhy_cached_byte_size_);
  }
  for (int i = 0; i < this->mbhy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->mbhy(i), output);
  }

  // @@protoc_insertion_point(serialize_end:motionClustering.Trajectory)
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motionClustering.Trajectory)
  // optional int32 trackId = 1;
  if (this->trackid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trackid(), target);
  }

  // repeated float normalizedPoints = 2;
  if (this->normalizedpoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _normalizedpoints_cached_byte_size_, target);
  }
  for (int i = 0; i < this->normalizedpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->normalizedpoints(i), target);
  }

  // repeated float hog = 3;
  if (this->hog_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hog_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->hog(i), target);
  }

  // repeated float hof = 4;
  if (this->hof_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hof_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hof_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->hof(i), target);
  }

  // repeated float mbhX = 5;
  if (this->mbhx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mbhx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mbhx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mbhx(i), target);
  }

  // repeated float mbhY = 6;
  if (this->mbhy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mbhy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mbhy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mbhy(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motionClustering.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  // optional int32 trackId = 1;
  if (this->trackid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trackid());
  }

  // repeated float normalizedPoints = 2;
  {
    int data_size = 0;
    data_size = 4 * this->normalizedpoints_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalizedpoints_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float hog = 3;
  {
    int data_size = 0;
    data_size = 4 * this->hog_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hog_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float hof = 4;
  {
    int data_size = 0;
    data_size = 4 * this->hof_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hof_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mbhX = 5;
  {
    int data_size = 0;
    data_size = 4 * this->mbhx_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mbhx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mbhY = 6;
  {
    int data_size = 0;
    data_size = 4 * this->mbhy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mbhy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Trajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  normalizedpoints_.MergeFrom(from.normalizedpoints_);
  hog_.MergeFrom(from.hog_);
  hof_.MergeFrom(from.hof_);
  mbhx_.MergeFrom(from.mbhx_);
  mbhy_.MergeFrom(from.mbhy_);
  if (from.trackid() != 0) {
    set_trackid(from.trackid());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  std::swap(trackid_, other->trackid_);
  normalizedpoints_.UnsafeArenaSwap(&other->normalizedpoints_);
  hog_.UnsafeArenaSwap(&other->hog_);
  hof_.UnsafeArenaSwap(&other->hof_);
  mbhx_.UnsafeArenaSwap(&other->mbhx_);
  mbhy_.UnsafeArenaSwap(&other->mbhy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional int32 trackId = 1;
void Trajectory::clear_trackid() {
  trackid_ = 0;
}
 ::google::protobuf::int32 Trajectory::trackid() const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.trackId)
  return trackid_;
}
 void Trajectory::set_trackid(::google::protobuf::int32 value) {
  
  trackid_ = value;
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.trackId)
}

// repeated float normalizedPoints = 2;
int Trajectory::normalizedpoints_size() const {
  return normalizedpoints_.size();
}
void Trajectory::clear_normalizedpoints() {
  normalizedpoints_.Clear();
}
 float Trajectory::normalizedpoints(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.normalizedPoints)
  return normalizedpoints_.Get(index);
}
 void Trajectory::set_normalizedpoints(int index, float value) {
  normalizedpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.normalizedPoints)
}
 void Trajectory::add_normalizedpoints(float value) {
  normalizedpoints_.Add(value);
  // @@protoc_insertion_point(field_add:motionClustering.Trajectory.normalizedPoints)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::normalizedpoints() const {
  // @@protoc_insertion_point(field_list:motionClustering.Trajectory.normalizedPoints)
  return normalizedpoints_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_normalizedpoints() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.Trajectory.normalizedPoints)
  return &normalizedpoints_;
}

// repeated float hog = 3;
int Trajectory::hog_size() const {
  return hog_.size();
}
void Trajectory::clear_hog() {
  hog_.Clear();
}
 float Trajectory::hog(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.hog)
  return hog_.Get(index);
}
 void Trajectory::set_hog(int index, float value) {
  hog_.Set(index, value);
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.hog)
}
 void Trajectory::add_hog(float value) {
  hog_.Add(value);
  // @@protoc_insertion_point(field_add:motionClustering.Trajectory.hog)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::hog() const {
  // @@protoc_insertion_point(field_list:motionClustering.Trajectory.hog)
  return hog_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_hog() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.Trajectory.hog)
  return &hog_;
}

// repeated float hof = 4;
int Trajectory::hof_size() const {
  return hof_.size();
}
void Trajectory::clear_hof() {
  hof_.Clear();
}
 float Trajectory::hof(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.hof)
  return hof_.Get(index);
}
 void Trajectory::set_hof(int index, float value) {
  hof_.Set(index, value);
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.hof)
}
 void Trajectory::add_hof(float value) {
  hof_.Add(value);
  // @@protoc_insertion_point(field_add:motionClustering.Trajectory.hof)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::hof() const {
  // @@protoc_insertion_point(field_list:motionClustering.Trajectory.hof)
  return hof_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_hof() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.Trajectory.hof)
  return &hof_;
}

// repeated float mbhX = 5;
int Trajectory::mbhx_size() const {
  return mbhx_.size();
}
void Trajectory::clear_mbhx() {
  mbhx_.Clear();
}
 float Trajectory::mbhx(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.mbhX)
  return mbhx_.Get(index);
}
 void Trajectory::set_mbhx(int index, float value) {
  mbhx_.Set(index, value);
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.mbhX)
}
 void Trajectory::add_mbhx(float value) {
  mbhx_.Add(value);
  // @@protoc_insertion_point(field_add:motionClustering.Trajectory.mbhX)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::mbhx() const {
  // @@protoc_insertion_point(field_list:motionClustering.Trajectory.mbhX)
  return mbhx_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_mbhx() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.Trajectory.mbhX)
  return &mbhx_;
}

// repeated float mbhY = 6;
int Trajectory::mbhy_size() const {
  return mbhy_.size();
}
void Trajectory::clear_mbhy() {
  mbhy_.Clear();
}
 float Trajectory::mbhy(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.Trajectory.mbhY)
  return mbhy_.Get(index);
}
 void Trajectory::set_mbhy(int index, float value) {
  mbhy_.Set(index, value);
  // @@protoc_insertion_point(field_set:motionClustering.Trajectory.mbhY)
}
 void Trajectory::add_mbhy(float value) {
  mbhy_.Add(value);
  // @@protoc_insertion_point(field_add:motionClustering.Trajectory.mbhY)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::mbhy() const {
  // @@protoc_insertion_point(field_list:motionClustering.Trajectory.mbhY)
  return mbhy_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_mbhy() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.Trajectory.mbhY)
  return &mbhy_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryList::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryList::TrajectoryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motionClustering.TrajectoryList)
}

void TrajectoryList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrajectoryList::TrajectoryList(const TrajectoryList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motionClustering.TrajectoryList)
}

void TrajectoryList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TrajectoryList::~TrajectoryList() {
  // @@protoc_insertion_point(destructor:motionClustering.TrajectoryList)
  SharedDtor();
}

void TrajectoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryList_descriptor_;
}

const TrajectoryList& TrajectoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dump_2eproto();
  return *default_instance_;
}

TrajectoryList* TrajectoryList::default_instance_ = NULL;

TrajectoryList* TrajectoryList::New(::google::protobuf::Arena* arena) const {
  TrajectoryList* n = new TrajectoryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryList::Clear() {
  tracks_.Clear();
}

bool TrajectoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motionClustering.TrajectoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motionClustering.Trajectory tracks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tracks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motionClustering.TrajectoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motionClustering.TrajectoryList)
  return false;
#undef DO_
}

void TrajectoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motionClustering.TrajectoryList)
  // repeated .motionClustering.Trajectory tracks = 1;
  for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tracks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:motionClustering.TrajectoryList)
}

::google::protobuf::uint8* TrajectoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motionClustering.TrajectoryList)
  // repeated .motionClustering.Trajectory tracks = 1;
  for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tracks(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motionClustering.TrajectoryList)
  return target;
}

int TrajectoryList::ByteSize() const {
  int total_size = 0;

  // repeated .motionClustering.Trajectory tracks = 1;
  total_size += 1 * this->tracks_size();
  for (int i = 0; i < this->tracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrajectoryList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryList::MergeFrom(const TrajectoryList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tracks_.MergeFrom(from.tracks_);
}

void TrajectoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryList::CopyFrom(const TrajectoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryList::IsInitialized() const {

  return true;
}

void TrajectoryList::Swap(TrajectoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryList::InternalSwap(TrajectoryList* other) {
  tracks_.UnsafeArenaSwap(&other->tracks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryList_descriptor_;
  metadata.reflection = TrajectoryList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryList

// repeated .motionClustering.Trajectory tracks = 1;
int TrajectoryList::tracks_size() const {
  return tracks_.size();
}
void TrajectoryList::clear_tracks() {
  tracks_.Clear();
}
const ::motionClustering::Trajectory& TrajectoryList::tracks(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.TrajectoryList.tracks)
  return tracks_.Get(index);
}
::motionClustering::Trajectory* TrajectoryList::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:motionClustering.TrajectoryList.tracks)
  return tracks_.Mutable(index);
}
::motionClustering::Trajectory* TrajectoryList::add_tracks() {
  // @@protoc_insertion_point(field_add:motionClustering.TrajectoryList.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::motionClustering::Trajectory >*
TrajectoryList::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.TrajectoryList.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::motionClustering::Trajectory >&
TrajectoryList::tracks() const {
  // @@protoc_insertion_point(field_list:motionClustering.TrajectoryList.tracks)
  return tracks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoInstance::kActionLabelFieldNumber;
const int VideoInstance::kVideoIndexFieldNumber;
const int VideoInstance::kNumClustersFieldNumber;
const int VideoInstance::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoInstance::VideoInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motionClustering.VideoInstance)
}

void VideoInstance::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoInstance::VideoInstance(const VideoInstance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motionClustering.VideoInstance)
}

void VideoInstance::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actionlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoindex_ = 0;
  numclusters_ = 0;
}

VideoInstance::~VideoInstance() {
  // @@protoc_insertion_point(destructor:motionClustering.VideoInstance)
  SharedDtor();
}

void VideoInstance::SharedDtor() {
  actionlabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VideoInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoInstance_descriptor_;
}

const VideoInstance& VideoInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dump_2eproto();
  return *default_instance_;
}

VideoInstance* VideoInstance::default_instance_ = NULL;

VideoInstance* VideoInstance::New(::google::protobuf::Arena* arena) const {
  VideoInstance* n = new VideoInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoInstance::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoInstance*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(videoindex_, numclusters_);
  actionlabel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  tracks_.Clear();
}

bool VideoInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motionClustering.VideoInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string actionLabel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionlabel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actionlabel().data(), this->actionlabel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "motionClustering.VideoInstance.actionLabel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_videoIndex;
        break;
      }

      // optional int32 videoIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_videoIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numClusters;
        break;
      }

      // optional int32 numClusters = 3;
      case 3: {
        if (tag == 24) {
         parse_numClusters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numclusters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tracks;
        break;
      }

      // repeated .motionClustering.Trajectory tracks = 4;
      case 4: {
        if (tag == 34) {
         parse_tracks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tracks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motionClustering.VideoInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motionClustering.VideoInstance)
  return false;
#undef DO_
}

void VideoInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motionClustering.VideoInstance)
  // optional string actionLabel = 1;
  if (this->actionlabel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionlabel().data(), this->actionlabel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "motionClustering.VideoInstance.actionLabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->actionlabel(), output);
  }

  // optional int32 videoIndex = 2;
  if (this->videoindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->videoindex(), output);
  }

  // optional int32 numClusters = 3;
  if (this->numclusters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numclusters(), output);
  }

  // repeated .motionClustering.Trajectory tracks = 4;
  for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tracks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:motionClustering.VideoInstance)
}

::google::protobuf::uint8* VideoInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motionClustering.VideoInstance)
  // optional string actionLabel = 1;
  if (this->actionlabel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionlabel().data(), this->actionlabel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "motionClustering.VideoInstance.actionLabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->actionlabel(), target);
  }

  // optional int32 videoIndex = 2;
  if (this->videoindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->videoindex(), target);
  }

  // optional int32 numClusters = 3;
  if (this->numclusters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numclusters(), target);
  }

  // repeated .motionClustering.Trajectory tracks = 4;
  for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tracks(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motionClustering.VideoInstance)
  return target;
}

int VideoInstance::ByteSize() const {
  int total_size = 0;

  // optional string actionLabel = 1;
  if (this->actionlabel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actionlabel());
  }

  // optional int32 videoIndex = 2;
  if (this->videoindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->videoindex());
  }

  // optional int32 numClusters = 3;
  if (this->numclusters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numclusters());
  }

  // repeated .motionClustering.Trajectory tracks = 4;
  total_size += 1 * this->tracks_size();
  for (int i = 0; i < this->tracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInstance::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VideoInstance* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoInstance>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoInstance::MergeFrom(const VideoInstance& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tracks_.MergeFrom(from.tracks_);
  if (from.actionlabel().size() > 0) {

    actionlabel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actionlabel_);
  }
  if (from.videoindex() != 0) {
    set_videoindex(from.videoindex());
  }
  if (from.numclusters() != 0) {
    set_numclusters(from.numclusters());
  }
}

void VideoInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInstance::CopyFrom(const VideoInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInstance::IsInitialized() const {

  return true;
}

void VideoInstance::Swap(VideoInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoInstance::InternalSwap(VideoInstance* other) {
  actionlabel_.Swap(&other->actionlabel_);
  std::swap(videoindex_, other->videoindex_);
  std::swap(numclusters_, other->numclusters_);
  tracks_.UnsafeArenaSwap(&other->tracks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoInstance_descriptor_;
  metadata.reflection = VideoInstance_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInstance

// optional string actionLabel = 1;
void VideoInstance::clear_actionlabel() {
  actionlabel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoInstance::actionlabel() const {
  // @@protoc_insertion_point(field_get:motionClustering.VideoInstance.actionLabel)
  return actionlabel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoInstance::set_actionlabel(const ::std::string& value) {
  
  actionlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:motionClustering.VideoInstance.actionLabel)
}
 void VideoInstance::set_actionlabel(const char* value) {
  
  actionlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:motionClustering.VideoInstance.actionLabel)
}
 void VideoInstance::set_actionlabel(const char* value, size_t size) {
  
  actionlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:motionClustering.VideoInstance.actionLabel)
}
 ::std::string* VideoInstance::mutable_actionlabel() {
  
  // @@protoc_insertion_point(field_mutable:motionClustering.VideoInstance.actionLabel)
  return actionlabel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoInstance::release_actionlabel() {
  
  return actionlabel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoInstance::set_allocated_actionlabel(::std::string* actionlabel) {
  if (actionlabel != NULL) {
    
  } else {
    
  }
  actionlabel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionlabel);
  // @@protoc_insertion_point(field_set_allocated:motionClustering.VideoInstance.actionLabel)
}

// optional int32 videoIndex = 2;
void VideoInstance::clear_videoindex() {
  videoindex_ = 0;
}
 ::google::protobuf::int32 VideoInstance::videoindex() const {
  // @@protoc_insertion_point(field_get:motionClustering.VideoInstance.videoIndex)
  return videoindex_;
}
 void VideoInstance::set_videoindex(::google::protobuf::int32 value) {
  
  videoindex_ = value;
  // @@protoc_insertion_point(field_set:motionClustering.VideoInstance.videoIndex)
}

// optional int32 numClusters = 3;
void VideoInstance::clear_numclusters() {
  numclusters_ = 0;
}
 ::google::protobuf::int32 VideoInstance::numclusters() const {
  // @@protoc_insertion_point(field_get:motionClustering.VideoInstance.numClusters)
  return numclusters_;
}
 void VideoInstance::set_numclusters(::google::protobuf::int32 value) {
  
  numclusters_ = value;
  // @@protoc_insertion_point(field_set:motionClustering.VideoInstance.numClusters)
}

// repeated .motionClustering.Trajectory tracks = 4;
int VideoInstance::tracks_size() const {
  return tracks_.size();
}
void VideoInstance::clear_tracks() {
  tracks_.Clear();
}
const ::motionClustering::Trajectory& VideoInstance::tracks(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.VideoInstance.tracks)
  return tracks_.Get(index);
}
::motionClustering::Trajectory* VideoInstance::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:motionClustering.VideoInstance.tracks)
  return tracks_.Mutable(index);
}
::motionClustering::Trajectory* VideoInstance::add_tracks() {
  // @@protoc_insertion_point(field_add:motionClustering.VideoInstance.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::motionClustering::Trajectory >*
VideoInstance::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.VideoInstance.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::motionClustering::Trajectory >&
VideoInstance::tracks() const {
  // @@protoc_insertion_point(field_list:motionClustering.VideoInstance.tracks)
  return tracks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoList::kVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoList::VideoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motionClustering.VideoList)
}

void VideoList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoList::VideoList(const VideoList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motionClustering.VideoList)
}

void VideoList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VideoList::~VideoList() {
  // @@protoc_insertion_point(destructor:motionClustering.VideoList)
  SharedDtor();
}

void VideoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoList_descriptor_;
}

const VideoList& VideoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dump_2eproto();
  return *default_instance_;
}

VideoList* VideoList::default_instance_ = NULL;

VideoList* VideoList::New(::google::protobuf::Arena* arena) const {
  VideoList* n = new VideoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoList::Clear() {
  videos_.Clear();
}

bool VideoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motionClustering.VideoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motionClustering.VideoInstance videos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_videos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_videos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_videos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motionClustering.VideoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motionClustering.VideoList)
  return false;
#undef DO_
}

void VideoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motionClustering.VideoList)
  // repeated .motionClustering.VideoInstance videos = 1;
  for (unsigned int i = 0, n = this->videos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->videos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:motionClustering.VideoList)
}

::google::protobuf::uint8* VideoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motionClustering.VideoList)
  // repeated .motionClustering.VideoInstance videos = 1;
  for (unsigned int i = 0, n = this->videos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->videos(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motionClustering.VideoList)
  return target;
}

int VideoList::ByteSize() const {
  int total_size = 0;

  // repeated .motionClustering.VideoInstance videos = 1;
  total_size += 1 * this->videos_size();
  for (int i = 0; i < this->videos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VideoList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoList::MergeFrom(const VideoList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  videos_.MergeFrom(from.videos_);
}

void VideoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoList::CopyFrom(const VideoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoList::IsInitialized() const {

  return true;
}

void VideoList::Swap(VideoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoList::InternalSwap(VideoList* other) {
  videos_.UnsafeArenaSwap(&other->videos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoList_descriptor_;
  metadata.reflection = VideoList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoList

// repeated .motionClustering.VideoInstance videos = 1;
int VideoList::videos_size() const {
  return videos_.size();
}
void VideoList::clear_videos() {
  videos_.Clear();
}
const ::motionClustering::VideoInstance& VideoList::videos(int index) const {
  // @@protoc_insertion_point(field_get:motionClustering.VideoList.videos)
  return videos_.Get(index);
}
::motionClustering::VideoInstance* VideoList::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:motionClustering.VideoList.videos)
  return videos_.Mutable(index);
}
::motionClustering::VideoInstance* VideoList::add_videos() {
  // @@protoc_insertion_point(field_add:motionClustering.VideoList.videos)
  return videos_.Add();
}
::google::protobuf::RepeatedPtrField< ::motionClustering::VideoInstance >*
VideoList::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:motionClustering.VideoList.videos)
  return &videos_;
}
const ::google::protobuf::RepeatedPtrField< ::motionClustering::VideoInstance >&
VideoList::videos() const {
  // @@protoc_insertion_point(field_list:motionClustering.VideoList.videos)
  return videos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace motionClustering

// @@protoc_insertion_point(global_scope)
